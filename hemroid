#!/usr/bin/python

import os,sys,errno
from subprocess import call, check_output, Popen, PIPE, STDOUT
import inspect
import json
import uuid
import glob
import textwrap

HEMDIR  = os.path.abspath(os.path.dirname(inspect.getfile(inspect.currentframe())))
VAULT   = HEMDIR + '/vault'
PKGDIR  = HEMDIR + '/packages'
DISTDIR = HEMDIR + '/dist'
CACHEDIR= VAULT + '/cache'
SRCDIR  = VAULT + '/src'
REPODIR = VAULT + '/repo'
HEMROOT = VAULT + '/hemroot'

def require(tool, env):
    path = os.environ.get(env) or tool
    path = check_output(['which',path])
    if path is None or path.strip() == '':
        raise ValueError("'" + tool + "' is required.  Either put in PATH or set " + env)
    return path.strip()

AVAILABLE_PACKAGES = []
for subdir, dirs, files in os.walk(PKGDIR):
    if subdir == PKGDIR:
        AVAILABLE_PACKAGES.extend(dirs)

PLATFORMS = {
    'armeabi'     : 'arch-arm',
    'armeabi-v7a' : 'arch-arm',
    'arm64-v8a'   : 'arch-arm64',
    'x86'         : 'arch-x86',
    'x86_64'      : 'arch-x86_64',
    'mips'        : 'arch-mips',
    'mips64'      : 'arch-mips64'
}

HOSTS = {
    'armeabi'     : 'arm-eabi',
    'armeabi-v7a' : 'arm-eabiv7a',
    'arm64-v8a'   : 'arm-eabiv8a',
    'x86'         : 'x86',
    'x86_64'      : 'x86_64',
    'mips'        : 'mips',
    'mips64'      : 'mips64'
}

PREFIXES = {
    'armeabi'     : 'arm-linux-androideabi',
    'armeabi-v7a' : 'arm-linux-androideabi',
    'arm64-v8a'   : 'aarch64-linux-android',
    'x86'         : 'i686-linux-android',
    'x86_64'      : 'x86_64-linux-android',
    'mips'        : 'mipsel-linux-android',
    'mips64'      : 'mips64el-linux-android'
}

GCC_VERSION      = '4.9'

if "Darwin" in check_output([require('uname','UNAME'),'-a']): SYSTEM_OS = 'darwin-x86_64'
else: SYSTEM_OS = 'linux-x86_64'

TOOLCHAINS_GCC = {
    'armeabi'     : 'arm-linux-androideabi-',
    'armeabi-v7a' : 'arm-linux-androideabi-',
    'arm64-v8a'   : 'aarch64-linux-android-',
    'x86'         : 'x86-',
    'x86_64'      : 'x86_64-',
    'mips'        : 'mipsel-linux-android-',
    'mips64'      : 'mips64el-linux-android-'
}

CLANG_VERSION  = '3.6'

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def create_toolchain(abi,api):
    TAR  = require('tar', 'TAR')
    BASH = require('bash','BASH')
    RM   = require('rm',  'RM')

    try: ANDROID_NDK = os.environ['ANDROID_NDK']
    except KeyError: raise ValueError('ANDROID_NDK environment variable not set')
    
    toolchain_dir = '/'.join([VAULT,'android-'+str(api),abi,'toolchain'])
    if os.path.exists(toolchain_dir):
        return
    mkdir_p(toolchain_dir)
    output = call([
        BASH,
        ANDROID_NDK + '/build/tools/make-standalone-toolchain.sh',
        '--toolchain='+TOOLCHAINS_GCC[abi]+GCC_VERSION,
#        '--llvm-version='+CLANG_VERSION, # don't use CLANG -- too many bugs
        '--platform=android-' + str(api),
        '--install-dir=' + toolchain_dir,
#        '--system='+SYSTEM_OS,
        '--stl=gnustl'
    ])
    if output != 0:
        call([RM,'-rf',toolchain_dir])
        raise ValueError("Can't build toolchain for " + abi)
    if abi in ['arm64-v8a','x86_64','mips64']:
        dist = abi
        if "linux" in SYSTEM_OS: host = "linux"
        else: host = "darwin"
        if dist == 'arm64-v8a': dist = 'arm64'
        dist = 'gcc-'+dist+'-'+host+'-x86_64.tar.bz2' 
        output = call([TAR,
                    'xf',
                    '/'.join([DISTDIR,dist]),
                    '--strip-components=1',
                    '-C',
                    toolchain_dir
                 ])
        if output != 0:
            call([RM,'-rf',toolchain_dir])
            raise ValueError("ERROR: Can't extract gcc patch for " + abi)
    return

def usage():
    print \
"""
hemroid - package manager for android

Usage:
    hemroid <command> <options> <pkgs>
Where:
    <command> is one of:
      install
      remove
      pkginfo
      dependencies

hemroid install [--abi=<abi>] [--api=<api>] [--dirty] [--quiet] [--verbose] <pkgs>
    Installs space-delimted packages, recursively installing dependencies.
        --abi=<abi> install for ABI <abi> only (default: all ABIs)
        --api=<api> override API level (default: max(package min,NDK min))
        --dirty     Do not clean up sandbox when done (debug only)
        --verbose   Echo make output to stdout
        --quiet     Suppress info messages
        
hemroid remove [--abi=<abi>] [--clean] [--quiet] <pkgs>
    Removes space-delimted packages.  This does not recurse dependencies.
        --abi=<abi> remove for ABI <abi> only (default: all ABIs)
        --clean     Delete saved repo, will force fresh rebuild on next install
        --quiet     Suppress info messages

hemroid pkginfo [--abi=<abi>] [--api=<api>] [--quiet] <pkgs>
    Displays package information for space-delimted packages.  The output is in JSON
    format and is not particularly readable for humans.  Future versions will be formatted
    in English.
        --abi=<abi> Information for ABI <abi> only (default: all ABIs)
        --api=<api> override API level (default: max(package min,NDK min))
        --quiet     Suppress info messages

hemroid dependencies [--abi=<abi>] [--api=<api>] [--quiet] <pkgs>
    Displays dependency information for space-delimted packages.  The output is in JSON
    format and is not particularly readable for humans.  Future versions will be formatted
    in English.
        --abi=<abi> Dependencies for ABI <abi> only (default: all ABIs)
        --api=<api> override API level (default: max(package min,NDK min))
        --quiet     Suppress info messages

"""
    print "<pkgs> is one or more of:"
    print "\n".join(textwrap.wrap(" ".join(sorted(AVAILABLE_PACKAGES)),
        width=80, break_long_words=False))
    print ""
    print "<abi> is one or more of:"
    print " ".join(valid_ABI(None))
    print ""
    print "Supported <api> depends on ABI, what the package supports, and the NDK."
    print "Minimum <api> for each ABI:"
    for abi in get_available_apis():
        print "    " + (abi + '            ')[0:12] + str(get_available_apis()[abi])
    print "Unless you know exactly what you're doing, you shouldn't set <api>.  Use "
    print "the default."
    print ""

def valid_ABI(abi):
    VALID = ['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64']
    if abi is None: return VALID
    if abi in VALID:
        return abi
    else:
        raise ValueError('Unknown abi "' + abi + '"')

g_apis = None
def get_available_apis():
    global g_apis
    if g_apis is not None:
        return g_apis
        
    try: ANDROID_NDK = os.environ['ANDROID_NDK']
    except KeyError:
        raise ValueError('ANDROID_NDK environment variable not set')

    _apis = { 'arm' : 99, 'mips' : 99, 'x86' : 99, 'x86_64' : 99, 'mips64' : 99,
        'arm64' : 99 }
    for subdir, dirs, files in os.walk(ANDROID_NDK+'/platforms'):
        subdir_ = subdir.split('/')[-1]
        if subdir_.startswith('android-'):
            api = int(subdir_.replace('android-',''))
            for dir in dirs:
                if dir.startswith('arch-'):
                    arch = dir.replace('arch-','')
                    min = _apis[arch]
                    if api < min: _apis[arch] = api
    _apis['armeabi'] = _apis['arm']
    _apis['armeabi-v7a'] = _apis['arm']
    _apis['arm64-v8a'] = _apis['arm64']
    _apis.pop('arm',None)
    _apis.pop('arm64', None)
    g_apis = _apis
    return _apis
    
def get_version(js):
    version = 0
    try:
        version = version + js['major'] * 1000 * 1000
        version = version + js['minor'] * 1000
        version = version + js['patch']
    except KeyError:
        """ not all version elements required """
    
    return version
        
class Options:
    def _require_value(key, value):
        if value is None: raise ValueError(self._key + ' requires a value')
        return value
        
    def __unknown_option(self, value):
        raise ValueError("Unknown option " + self._key)
        
    def option(self, _key, value):
        self._key = _key
        key = "_opt_" + _key.lstrip('-')
        method = getattr(self, key, self.__unknown_option)
        return method(value)
        
    def parse_options(self, argv):
        rem = []
        for arg in argv:
            a = arg.split('=',1)
            key = a[0]
            if len(a) < 2: value = None
            else: value = a[1]
            if key.startswith('--'):
                self.option(key,value)
                rem.append(arg)
        for arg in rem: argv.remove(arg)

class Install(Options):
    def _opt_abi(self, value):
        self._abis.append(valid_ABI(self._require_value(value)))
    def _opt_api(self, value):
        self._force_api = int(self._require_value(value))
    def _opt_dirty(self, value):
        self._dirty = True
    def _opt_quiet(self, value):
        self._quiet = True    
    def _opt_verbose(self, value):
        self._verbose = True    
        
    def parse_package_json(self,pkg):
        with open('/'.join([PKGDIR,pkg,'package.json'])) as data_file:    
            self._pkg_data = json.load(data_file)
    
    def cache_archive(self,pkg):
        RM   =  require('rm',   'RM')
        WGET =  require('wget', 'WGET')
        UNZIP = require('unzip','UNZIP')
        TAR =   require('tar',  'TAR')
        PATCH=  require('patch','PATCH')

        srcdir = None
        url = None
        try:
            srcdir = '/'.join([SRCDIR,self._pkg_data['source']['dir']])
            url = self._pkg_data['source']['url']
        except KeyError:
            if srcdir is not None:
                mkdir_p(srcdir)
            else:
                raise
            return
        
        fname = os.path.basename(url)
        cachename = '/'.join([CACHEDIR,fname])
        pkgdir = '/'.join([PKGDIR,pkg])

        if not os.path.exists(cachename):
            mkdir_p(CACHEDIR)
            output = call([WGET,'-O',cachename,url])
            if output != 0:
                call([RM,'-f',cachename])
                raise ValueError('ERROR: ' + url + ' failed to download.')
            call([RM,'-rf',srcdir])
        if not os.path.exists(srcdir):
            mkdir_p(SRCDIR)
            output = 0
            with open('/dev/null', "w") as devnull:
                if fname.endswith('.zip'):
                    output = call([UNZIP,cachename,'-d',SRCDIR], stderr=devnull)
                elif fname.endswith('tar.gz') or fname.endswith('.tgz'):
                    output = call([TAR,'zxf',cachename,'-C',SRCDIR], stderr=devnull)
                elif fname.endswith('tar.xz') or fname.endswith('.tgx') or \
                     fname.endswith('.tar.bz2'):
                    output = call([TAR,'xf',cachename,'-C',SRCDIR], stderr=devnull)
                else: raise ValueError("ERROR: Don't know how to extract '" + fname + "'")
            if output != 0:
                call([RM,'-rf',srcdir])
                raise ValueError
            try:
                patches = self._pkg_data['patches']
                for patch in patches:
                    output = call([PATCH,
                        '-d',  srcdir,
                        '-p1',
                        '-i',  '/'.join([pkgdir,patch])])
                    if output != 0:
                        call([RM,'-rf',srcdir])
                        raise ValueError("Failed to apply patch '" + \
                            '/'.join([pkgdir,patch]) + "'") 
            except KeyError:
                """ No patches """
            
    def perform_steps(self,pkg,abi,api,sandbox):
        CP =  require('cp', 'CP')
        TAR = require('tar','TAR')
        srcdir = '/'.join([SRCDIR,self._pkg_data['source']['dir']])
        pkgdir = '/'.join([PKGDIR,pkg])
        hostdir = '/'.join([VAULT,'sandbox',sandbox,self._pkg_data['source']['dir']])
        crossdir = '/'.join([VAULT,'sandbox',sandbox,abi,
            'packages',self._pkg_data['source']['dir']])
        toolchain_dir = '/'.join([VAULT,'android-'+str(api),abi,'toolchain'])

        env = ''.join(["SRCDIR=",srcdir," PKGDIR=",pkgdir," HOSTDIR=",hostdir,
            " CROSSDIR=",crossdir," ABI=",abi])
    
        try: ANDROID_NDK = os.environ['ANDROID_NDK']
        except KeyError:
            raise ValueError('ANDROID_NDK environment variable not set')
        try: ANDROID_SDK = os.environ['ANDROID_SDK']
        except KeyError:
            raise ValueError('ANDROID_SDK environment variable not set')

        PLATFORM = toolchain_dir+'/sysroot'
        CFLAGS = "\"-fPIC -DANDROID -Wno-multichar " + \
            "-isystem " + ANDROID_NDK +  "/sources/android/support/include " + \
            "-Wno-error=implicit-function-declaration -DANDROID_API=" + \
            str(api) + '"'
        CPPFLAGS = "\"-fPIC -DANDROID -DNO_XMALLOC -mandroid " + \
            "-isystem " + ANDROID_NDK +  "/sources/android/support/include " + \
            "-I" + toolchain_dir+"/include/c++/4.9.x " + \
            "-I" + toolchain_dir+"/include/c++/4.9.x/"+PREFIXES[abi] + " " + \
            "-Wno-error=implicit-function-declaration -DANDROID_API=" + \
            str(api) + '"'
        LIBS = "-lc"            
        SANDBOX = '/'.join([VAULT,'sandbox',sandbox,'hemroot',abi])
        PKG_CONFIG_DIR = ""
        PKG_CONFIG_LIBDIR = "${SANDBOX}/lib/pkgconfig:${SANDBOX}/share/pkgconfig:"
        OUTPUT = '/'.join([VAULT,'sandbox',sandbox,abi,'out'])
        LDFLAGS ="\"-Wl,-rpath-link," + toolchain_dir + "/usr/lib " + \
            "-L${SANDBOX}/lib64 -L${SANDBOX}/lib -L${PLATFORM}/usr/lib64 " + \
            "-L${PLATFORM}/usr/lib -pie \""
        PREFIX =  PREFIXES[abi]
        HOST   =  HOSTS[abi]
        CROSS_COMPILE = toolchain_dir+"/bin/${PREFIX}"
        CC="\"${CROSS_COMPILE}-gcc --sysroot=$PLATFORM\""
        CXX="\"${CROSS_COMPILE}-g++ --sysroot=$PLATFORM\""
        AR="${CROSS_COMPILE}-ar"
        AS="${CROSS_COMPILE}-as"
        LD="${CROSS_COMPILE}-ld"
        RANLIB="${CROSS_COMPILE}-ranlib"
        NM="${CROSS_COMPILE}-nm"
        STRIP="${CROSS_COMPILE}-strip"
        cross_env = env + ''.join([
            ' PLATFORM=',PLATFORM,
            ' CFLAGS=',CFLAGS,
            ' CPPFLAGS=',CPPFLAGS,
            ' LIBS=',LIBS,
            ' ANDROID_API=',str(api),
            ' SANDBOX=',SANDBOX,
            ' PKG_CONFIG_DIR=',PKG_CONFIG_DIR,
            ' PKG_CONFIG_LIBDIR=',PKG_CONFIG_LIBDIR,
            ' OUTPUT=',OUTPUT,
            ' LDFLAGS=',LDFLAGS,
            ' PREFIX=',PREFIX,
            ' HOST=', HOST,
            ' CROSS_COMPILE=',CROSS_COMPILE,
            ' CC=',CC,
            ' CXX=',CXX,
            ' AR=',AR,
            ' AS=',AS,
            ' LD=',LD,
            ' RANLIB=',RANLIB,
            ' NM=',NM,
            ' STRIP=', STRIP]);
            
        try:
            for step in self._pkg_data['steps']:
                try: message = step['message']
                except KeyError: message = ""
                try: environment = step['environment']
                except KeyError: environment = "cross"
                try: shell = step['shell']
                except KeyError: shell = "/bin/bash"
                try: script = step['script']
                except KeyError: script = None

                if environment == 'host':
                    print "[Host] " + message
                    mkdir_p(hostdir)
                    command = "cd " + hostdir + "; " + env + " " + shell + \
                        " " + pkgdir + "/" + script
                elif environment == 'cross':
                    print "["+abi+"] " + message
                    mkdir_p(crossdir)
                    command = "cd " + crossdir + "; " + cross_env + " " + shell + \
                        " " + pkgdir + "/" + script
                else:
                    raise ValueError("Unknown environment type '" + environment + "'")
                    
                process = Popen(command,stdout=PIPE,stderr=STDOUT,shell=True)
                if self._verbose:
                    while True:
                        line = process.stdout.readline()
                        if line != '':
                            print "["+abi+"] " + line.rstrip()
                        else:
                            break
                proc_stdout = process.communicate()[0].strip()
                if process.returncode != 0:
                    f = open('/tmp/hemroid.burst', 'w')
                    print >> f, command
                    print >> f, proc_stdout
                    f.close()
                    raise ValueError("Problem building '" + pkg + \
                        "', see /tmp/hemroid.burst for details")
        except KeyError:
            """ No steps """

        try:
            self._pkg_data['api']['installed'] = api
        except KeyError:
            self._pkg_data['api'] = { 'installed' : api }
        
        hemdir = '/'.join([OUTPUT,'hemroid'])
        mkdir_p(hemdir)
        with open('/'.join([hemdir,pkg+'.json']), 'w') as outfile:
            self._pkg_data['files'] = []
            for subdir, dirs, files in os.walk(OUTPUT):
                for file in files:
                    self._pkg_data['files'].append(subdir.replace(OUTPUT+'/','') + '/' + file)
            json.dump(self._pkg_data, outfile)
        
        version = ''
        try:
            version = version + '.' + str(self._pkg_data['version']['major'])
            version = version + '.' + str(self._pkg_data['version']['minor'])
            version = version + '.' + str(self._pkg_data['version']['patch'])
        except KeyError:
            """ not all version elements required """

        pkgtar = pkg + '.' + str(api) + '.' + abi + version + '.tar.gz'
        if not self._quiet:
            print "[" + abi + "] " + \
                "Packaging repo " + pkgtar
        command = "(find " + OUTPUT + " -name \"*\.pc\" -o -name \"*\.la\" | " + \
            "xargs sed -i.killme -e 's|" + SANDBOX + "|{{SANDBOX}}|g') ; "
        command = command + \
            "(find " + OUTPUT + " -name \"*\.pc\" -o -name \"*\.la\" | " + \
            "xargs sed -i.killme -e 's|" + OUTPUT + "|{{SANDBOX}}|g') ; "
        command = command + "(find " + OUTPUT + " -name \"*\.killme\" | xargs rm -f)"
        process = Popen(command,stdout=PIPE,stderr=STDOUT,shell=True)
        proc_stdout = process.communicate()[0].strip()
        if process.returncode != 0: raise ValueError(proc_stdout)
        
        mkdir_p(REPODIR)
        output = call([TAR,'-czf',REPODIR + '/' + pkgtar,'-C',OUTPUT,'.'])
        if output !=0: raise ValueError("Failed to create repo file")
        
    def check_install(self,pkg,abi,api,dest):
        try:
           with open('/'.join([dest,'hemroid',pkg+'.json'])) as data_file:    
                pkg_data = json.load(data_file)
               
                if pkg_data['api']['installed'] > api:
                    return False
                
                i_version = get_version(pkg_data['version'])
                version = get_version(self._pkg_data['version'])
                    
                if i_version >= version:
                    return True
                return False
        except:
            return False
    
    def install_repo(self,pkg,abi,api,dest,ignore_version=False):
        TAR = require('tar','TAR')
        mkdir_p(REPODIR)
        pkgs = os.listdir(REPODIR)
        version = get_version(self._pkg_data['version'])
        
        repo = None
        min_api = 99
        for p in pkgs:
            p_version = 0
            a = (p.replace('.tar.gz','')).split('.')
            name = a[0]; p_api = int(a[1]); p_abi = a[2]
            if len(a) > 3: p_version = int(a[3]) * 1000 * 1000
            if len(a) > 4: p_version = p_version + (int(a[4]) * 1000)
            if len(a) > 5: p_version = p_version + int(a[5])
            if name == pkg and (p_version >= version or ignore_version) and \
                abi == p_abi and \
                api >= p_api and p_api < min_api:
                repo = p
                min_api = p_api
                break
        
        if repo is not None:
            mkdir_p(dest)
            output = call([TAR,'-xzf',REPODIR + '/' + repo,'-C',dest])
            if output !=0: raise ValueError("Failed to extract repo")
            command = "(find " + dest + " -name \"*\.pc\" -o -name \"*\.la\" | " + \
                "xargs sed -i.killme -e 's|{{SANDBOX}}|" + dest + "|g') ; "
            command = command + "(find " + dest + " -name \"*\.killme\" | xargs rm -f)"
            process = Popen(command,stdout=PIPE,stderr=STDOUT,shell=True)
            proc_stdout = process.communicate()[0].strip()
            if process.returncode != 0: raise ValueError(proc_stdout)
            return True
            
        return False

    def __init__(self,argv,loc=None):
        self.returnVal = lambda: 0
        self._abis = []
        self._force_api = None
        self._dirty = False
        self._quiet = False
        self._verbose = False
        RM  = require('rm', 'RM')
        CP  = require('cp', 'CP')
        
        self._apis = get_available_apis()

        sandbox = str(uuid.uuid4())

        try:
            self.parse_options(argv)
            if len(self._abis) == 0: self._abis = valid_ABI(None)

            for pkg in argv:
                if pkg not in AVAILABLE_PACKAGES:
                    raise ValueError("Don't know how to build package '" + pkg + "'\n" +
                        "\n".join(textwrap.wrap("Available packages: " +
                            " ".join(sorted(AVAILABLE_PACKAGES)),
                             width=80, break_long_words=False)))
        
            for abi in self._abis:
                if loc is None: dest = '/'.join([HEMROOT,abi])
                else: dest = dest = '/'.join([loc,abi])
                for pkg in argv:
                    self.parse_package_json(pkg)
                    if self._force_api is not None:
                        if self._force_api < self._apis[abi]:
                            if not self._quiet:
                                print "Warning: API level "+str(self._force_api)+ " is not " \
                                    "available for '" + abi + "'. Using level " + \
                                    str(self._apis[abi]) + " instead."
                            self._api = self._apis[abi]
                        else:
                            self._api = self._force_api
                    else:
                        try:
                            self._api = self._pkg_data['api']['min']
                        except KeyError:
                            self._api = self._apis[abi]
                        self._api = max(self._apis[abi], self._api)
                    create_toolchain(abi,self._api)

                    if self.check_install(pkg,abi,self._api,dest):
                        if not self._quiet:
                            print "[" + abi + "] " + \
                                "'" + pkg + "' already installed for " + abi
                    else:
                        opts = ["--quiet","--abi="+abi]
                        if self._force_api is not None:
                            opts.append("--api="+str(self._force_api))
                        if not self._quiet:
                            print "[" + abi + "] " + \
                                "checking dependencies for '" + pkg + "'"
                        dependencies = CheckDependencies(opts + [pkg],loc=loc)
                        if dependencies.returnVal() != 0:
                            raise ValueError
                        missing = dependencies.get_required()[abi][pkg]['missing']
                        if len(missing) > 0:
                            print "[" + abi + "] " + \
                                "The following dependencies need to be installed: " + \
                                ', '.join(missing)
                            opts = ["--quiet","--abi="+abi] + missing
                            if Remove(opts,loc=loc).returnVal() != 0:
                                raise ValueError
                            opts = ["--abi="+abi]
                            if self._force_api is not None:                  
                                opts.append("--api="+str(self._force_api))
                            if Install(opts+missing,loc=loc).returnVal() != 0:
                                raise ValueError

                        out = '/'.join([VAULT,'sandbox',sandbox,'hemroot'])
                        deps = dependencies.get_required()[abi][pkg]['all']

                        if len(deps) > 0:
                            for dep in deps:
                                self.install_repo(dep,abi,self._api,out+'/'+abi,
                                    ignore_version=True)
                            """
                            opts = ["--quiet","--abi="+abi]
                            if self._force_api is not None:                             
                                opts.append("--api="+str(self._force_api))
                            if Install(opts+deps,loc=out).returnVal() != 0:
                                raise ValueError
                            """
                            
                        if not self.install_repo(pkg,abi,self._api,dest):
                            self.cache_archive(pkg)
                            self.perform_steps(pkg,abi,self._api,sandbox)
                            Remove(['--quiet','--abi='+abi,pkg],loc=dest)
                            self.install_repo(pkg,abi,self._api,dest)
                            
                        if not self._quiet:
                            print "[" + abi + "] " + \
                                "Package '" + pkg + "' installed at " + dest
                
        except ValueError as e:
            print e
            self.returnVal = lambda: -1
            
        if not self._dirty:
            call([RM,'-rf','/'.join([VAULT,'sandbox',sandbox])])

class PackageInfo(Options):
    def _opt_abi(self, value):
        self._abis.append(valid_ABI(self._require_value(value)))
    def _opt_api(self, value):
        self._force_api = int(self._require_value(value))
    def _opt_quiet(self, value):
        self._quiet = True    

    def get_info(self):
        return self._info

    def __init__(self,argv,loc=None):
        self.returnVal = lambda: 0
        self._abis = []
        self._force_api = None
        self._apis = get_available_apis()
        self._info = {}
        self._quiet = False
        
        try:
            self.parse_options(argv)
            if len(self._abis) == 0: self._abis = valid_ABI(None)

            info = {}

            for pkg in argv:
                for abi in self._abis:
                    if loc is None: dest = '/'.join([HEMROOT,abi])
                    else: dest = dest = '/'.join([loc,abi])
                    try:
                        with open('/'.join([dest,'hemroid',pkg+'.json'])) as df:
                            js = json.load(df)
                            installed = { 'api' : js['api']['installed'],
                                'version': get_version(js['version']) }
                            try:
                                installed['dependencies'] = js['dependencies']
                                for dep in installed['dependencies']:
                                    dep['version'] = get_version(dep['version'])
                            except KeyError:
                                installed['dependencies'] = []
                    except IOError:
                            installed = None

                    try:
                        with open('/'.join([PKGDIR,pkg,'package.json'])) as df:
                            js = json.load(df)
                    except IOError:
                        raise ValueError("Package '" + pkg + "' does not exist")

                    latest = {}
                    try:
                        latest['version'] = get_version(js['version'])
                        try:
                            latest['dependencies'] = js['dependencies']
                            for dep in latest['dependencies']:
                                dep['version'] = get_version(dep['version'])
                        except KeyError:
                            latest['dependencies'] = []
                        latest['api'] = js['api']['min']
                    except KeyError:
                        raise ValueError("Package '" + pkg + "' illformed")

                    if self._force_api is not None:
                        if self._force_api < self._apis[abi]:
                            print "Warning: API level "+str(self._force_api)+ " is not " \
                                "available for '" + abi + "'. Using level " + \
                                str(self._apis[abi]) + " instead."
                            self._api = self._apis[abi]
                        else:
                            self._api = self._force_api
                    else:
                        try:
                            self._api = latest['api']
                        except KeyError:
                            self._api = self._apis[abi]
                        self._api = max(self._apis[abi], self._api)
                    latest['api'] = self._api
                                            
                    info = { "installed": installed, "latest": latest }
                        
                    try:
                        self._info[abi][pkg] = info
                    except KeyError:
                        self._info[abi] = { pkg: info }
                        
            if not self._quiet:
                print self._info

        except ValueError as e:
            print e
            self.returnVal = lambda: -1

class CheckDependencies(Options):
    def _opt_abi(self, value):
        self._abis.append(valid_ABI(self._require_value(value)))
    def _opt_api(self, value):
        self._force_api = int(self._require_value(value))
    def _opt_quiet(self, value):
        self._quiet = True

    def get_required(self):
        return self._required
        
    def uniq(self,seq):
        seen = set()
        seen_add = seen.add
        return [x for x in seq if not (x in seen or seen_add(x))]

    def __init__(self,argv,loc=None):
        self.returnVal = lambda: 0
        self._abis = []
        self._force_api = None
        self._apis = get_available_apis()
        self._quiet = False
        
        try:
            self.parse_options(argv)
            if len(self._abis) == 0: self._abis = valid_ABI(None)
            
            self._required = {}

            for abi in self._abis:
                self._required[abi] = {}
                for pkg in argv:
                    self._required[abi][pkg] = { 'missing':[], 'all':[] }
                    opts = ["--quiet","--abi="+abi]
                    if self._force_api is not None:
                        opts.append("--api="+str(self._force_api))
                    info = PackageInfo(opts + [pkg],loc=loc)
                    if info.returnVal() != 0:
                        raise ValueError
                    app = info.get_info()[abi][pkg]
                    if app['installed'] is not None:
                        use = app['installed']
                    else:
                        use = app['latest']
                    for dep in use['dependencies']:
                        dep_info = PackageInfo(opts + [dep['package']],loc=loc)
                        if dep_info.returnVal() != 0:
                            raise ValueError
                        dep_info = dep_info.get_info()[abi][dep['package']]
                        d = CheckDependencies(opts + [dep['package']],loc=loc)
                        if d.returnVal() != 0:
                            raise ValueError
                        self._required[abi][pkg]['missing'].extend(
                            d.get_required()[abi][dep['package']]['missing'])
                        self._required[abi][pkg]['all'].extend(
                            d.get_required()[abi][dep['package']]['all'])
                        if dep_info['installed'] is None or \
                            dep_info['installed']['version'] < dep['version'] or \
                            dep_info['installed']['api'] < dep_info['latest']['api']:
                            
                            self._required[abi][pkg]['missing'].append(dep['package'])
                        self._required[abi][pkg]['all'].append(dep['package'])
                        
                    self._required[abi][pkg]['missing'] = \
                        self.uniq(self._required[abi][pkg]['missing'])
                    self._required[abi][pkg]['all'] = \
                        self.uniq(self._required[abi][pkg]['all'])
        
            if not self._quiet:
                print self._required

        except ValueError as e:
            print e
            self.returnVal = lambda: -1
        
class Remove(Options):
    def _opt_abi(self, value):
        self._abis.append(valid_ABI(self._require_value(value)))
    def _opt_quiet(self, value):
        self._quiet = True
    def _opt_clean(self, value):
        self._clean = True
        
    def __init__(self,argv,loc=None):
        self.returnVal = lambda: 0
        self._abis = []
        self._quiet = False
        self._clean = False
        RM   = require('rm',   'RM')
        RMDIR= require('rmdir','RMDIR')
        
        try:
            self.parse_options(argv)
            if len(self._abis) == 0: self._abis = valid_ABI(None)

            for pkg in argv:
                for abi in self._abis:
                    if loc is None: dest = '/'.join([HEMROOT,abi])
                    else: dest = dest = '/'.join([loc,abi])
                    try:
                        with open('/'.join([dest,'hemroid',pkg+'.json'])) as df:
                            json.load(df)['files']
                    except IOError:
                        if not self._quiet and not self._clean:
                            raise ValueError("Package '" + pkg + "' is not installed for"\
                                " '" + abi + "'" )
                    except KeyError:
                        raise ValueError("Package '" + pkg + "' for '" + abi + "' " \
                            " does not contain any files.")
                    
            for pkg in argv:
                for abi in self._abis:
                    if loc is None: dest = '/'.join([HEMROOT,abi])
                    else: dest = dest = '/'.join([loc,abi])
                    pkg_data = {}
                    try:
                        if self._clean:
                            repos = glob.glob(REPODIR+"/"+pkg+".*."+abi+".*")
                            for repo in repos:
                                call([RM,'-f',repo])
                                if not self._quiet:
                                    print "Removed repo " + repo
                        with open('/'.join([dest,'hemroid',pkg+'.json'])) as data_file:
                            pkg_data = json.load(data_file)
                        for file in pkg_data['files']:
                            path = dest + '/' + file
                            call([RM,'-f',path])
                            """ Attempt to remove empty directories too """
                            path = '/'.join(path.split('/')[:-1])
                        for root, dirs, files in os.walk(dest,topdown=False):
                            for name in dirs:
                                fname = os.path.join(root,name)
                                try:
                                    if not os.listdir(fname):
                                        os.removedirs(fname)
                                except OSError:
                                    if os.path.islink(fname):
                                        os.remove(fname)
                    except IOError as e:
                        if not self._quiet and not self._clean: raise ValueError(e)

                    if not self._quiet:
                        print "Package '" + pkg + "' removed for" \
                                " '" + abi + "'"

        except ValueError as e:
            print e
            self.returnVal = lambda: -1


def main(argv):
    if len(argv) == 0:       return usage()
    if argv[0] == 'install': return Install(argv[1:]).returnVal()
    if argv[0] == 'remove':  return Remove (argv[1:]).returnVal()
    if argv[0] == 'pkginfo': return PackageInfo(argv[1:]).returnVal()
    if argv[0] == 'dependencies': return CheckDependencies(argv[1:]).returnVal()
    return usage()

if __name__ == "__main__":
    main(sys.argv[1:])
